{"mappings":"AA0D2C,SAAlCA,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAE3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAxCAO,SAASC,cAAc,SAE/BC,iBAAiB,UAGR,SAASC,GAEoBA,EAAnCC,iBAGuB,IAAzBC,EAAQC,OAAOH,EAAMI,cAAcC,SAASf,MAAMgB,OACtD,MAAMC,EAAOJ,OAAOH,EAAMI,cAAcC,SAASE,KAAKD,OAChDE,EAASL,OAAOH,EAAMI,cAAcC,SAASG,OAAOF,OAGnC,IAAlB,IAAIG,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAEpBrB,EAAEqB,EAAGP,GACdQ,MAAK,EAACrB,SAAEA,EAAQC,MAAEA,MACjBqB,QAAQC,IAAI,uBAAqBvB,QAAiBC,MAAU,IAE7DuB,OAAM,EAACxB,SAAEA,EAAQC,MAAEA,MAClBqB,QAAQC,IAAI,sBAAoBvB,QAAiBC,MAAU,IAGxCY,GAAdK,C","sources":["src/js/03-promises.js"],"sourcesContent":["// Задание 3 - генератор промисов\n\n// В HTML есть разметка формы, в поля которой пользователь будет вводить\n// - первую задержку в миллисекундах,\n// - шаг увеличения задержки для каждого промиса после первого,\n// - количество промисов которое необходимо создать.\n\n// Напиши скрипт, который при сабмите формы\n// - вызывает функцию createPromise(position, delay)\n// - столько раз, сколько ввели в поле amount.\n// - При каждом вызове передай ей\n//    - номер создаваемого промиса(position)\n//    - и задержку учитывая введенную     пользователем первую задержку(delay) и шаг(step).\n\n// Дополни код функции createPromise так, чтобы\n// - она возвращала один промис, который выполянется или отклоняется через delay времени.\n// - Значением промиса должен быть объект, в котором будут свойства position и delay со значениями одноименных параметров.\n// - Используй начальный код функции для выбора того, что нужно сделать с промисом - выполнить или отклонить.\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n// Поиск формы\nconst form = document.querySelector('.form');\n// Слушатель на форме, событие submit\nform.addEventListener('submit', handlerSubmit);\n\n// Коллбэк-функция\nfunction handlerSubmit(event) {\n  // Отмена действий по умолчанию при отправке формы\n  event.preventDefault();\n\n  // Значения input формы в числовом формате\n  let delay = Number(event.currentTarget.elements.delay.value);\n  const step = Number(event.currentTarget.elements.step.value);\n  const amount = Number(event.currentTarget.elements.amount.value);\n\n  // Цикл для вызова функции createPromise amount раз\n  for (let i = 1; i <= amount; i += 1) {\n    // Вызов функции createPromise\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    // увеличение задержки на шаг\n    delay += step;\n  }\n}\n\n// Функция createPromise возвращает промисс -объект со свойствами position и delay\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    // setTimeout - задержка при возврате промисса\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","document","querySelector","addEventListener","event","preventDefault","delay1","Number","currentTarget","elements","value","step","amount","i","then","console","log","catch"],"version":3,"file":"03-promises.a694eec0.js.map"}